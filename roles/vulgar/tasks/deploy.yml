---
# tasks file for cockpit
- name: gather facts
  gather_facts:

- name: Gather package facts
  package_facts:
    manager: auto

- name: Gather service facts
  service_facts:

- name: Install cockpit
  block:
  - name: Ensure cockpit packages exist
    package:
      name: "{{ item }}"
      state: latest
    with_items:
    - cockpit
    - cockpit-dashboard
    - cockpit-shell
    - cockpit-system
    - cockpit-ws
    - subscription-manager-cockpit

  - name: Add extra packages when on RHEL 8 (with podman)
    package:
      name: "{{ item }}"
      state: latest
    with_items:
    - cockpit-composer
    - cockpit-session-recording
    - cockpit-machines
    - cockpit-packagekit
    - cockpit-podman
    - cockpit-storaged
    when: ansible_distribution == 'RedHat' and ansible_distribution_major_version == '8' and podman_install == true

  - name: Add extra packages when on RHEL 8 (without podman)
    package:
      name: "{{ item }}"
      state: latest
    with_items:
    - cockpit-composer
    - cockpit-session-recording
    - cockpit-machines
    - cockpit-packagekit
    - cockpit-storaged
    when: ansible_distribution == 'RedHat' and ansible_distribution_major_version == '8' and podman_install == false

# - when: ansible_facts.packages["firewalld"] is defined
#   block:

#   - name: open cockpit port in firewalld (permanent)
#     ansible.posix.firewalld:
#       service: "cockpit"
#       state: enabled
#       permanent: yes

#   - name: open cockpit port in firewalld (immediate)
#     ansible.posix.firewalld:
#       service: "cockpit"
#       state: enabled
#       immediate: yes
#     when: ansible_facts.services["firewalld.service"].state == "running"

# - when: ansible_facts.packages["firewalld"] is undefined
#   block:

- name: open cockpit port in iptables
  iptables:
    chain: INPUT
    protocol: tcp
    destination_port: 9090
    jump: ACCEPT
  when: ansible_facts.packages["iptables"] is defined

# - name: Ensure pmlogger is started (for cockpit-pcp)
#   systemd:
#     name: "pmlogger.service"
#     state: "started"
#     enabled: true

- name: Ensure cockpit is started
  systemd:
    name: "cockpit.socket"
    state: "started"
    enabled: true
    daemon_reload: true

- name: Install bash-completion
  package:
    name: bash-completion
    state: latest

- name: "Check for OpenShift client"
  shell: |
    if [[ -f {{ oc_dir }}/oc ]]; then echo "true"; fi
  register: oc_exists

- name: "Install OpenShift client"
  shell: |
    set -euo pipefail

    curl -L https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz | \
    tar -xvzf - -C {{ oc_dir }}/ oc && chmod 755 {{ oc_dir }}/oc && ln -s {{ oc_dir }}/oc {{ oc_dir }}/kubectl
  when: oc_exists.stdout | bool == False

- name: Bash completion for oc client
  shell: oc completion bash >>/etc/bash_completion.d/oc_completion

- name: Login to OpenShift cluster as kubeadmin
  shell: oc login -u {{ oc_username }} -p {{ oc_password }} {{ oc_api_url }} --insecure-skip-tls-verify
  when: 
    - oc_username | length > 0
    - oc_password | length > 0
    - oc_api_url | length > 0
  register: result
  ignore_errors: yes

- debug:
    var: result

- name: Import and apply mongodb-persistent template 
  shell: oc create -n openshift -f https://raw.githubusercontent.com/openshift/origin/4ea9e6c5961eb815c200df933eee30c48a5c9166/examples/db-templates/mongodb-persistent-template.json
  when: result is succeeded
  ignore_errors: yes

...

# https://raw.githubusercontent.com/rh-anz-workshops/anzworkshop/main/mongodb-persistent-template.json