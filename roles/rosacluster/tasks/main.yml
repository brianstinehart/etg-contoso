---
- name: Set AWS Access Key ID (ec2-user)
  shell: aws iam get-role --role-name "AWSServiceRoleForElasticLoadBalancing" || aws iam create-service-linked-role --aws-service-name "elasticloadbalancing.amazonaws.com"

- name: ROSA login
  shell: rosa login --token "{{ rosa_api_token }}"

- name: ROSA create account roles
  shell: rosa create account-roles --mode auto --yes

- name: Create ROSA cluster
  shell: rosa create cluster --cluster-name "rosa-{{ instance_tag }}" --sts --mode auto --yes

- name: Create cluster-admin account
  shell: rosa create admin --cluster="rosa-{{ instance_tag }}"
  register: rosa_cluster_admin

- debug:
    var: rosa_cluster_admin

- name: OC login
  shell: "{{ rosa_cluster_admin }}"

- name: OC pull htpasswd-secret to local machine
  shell: oc get secret htpasswd-secret -ojsonpath={.data.htpasswd} -n openshift-config | base64 --decode > users.htpasswd

- name: OC update file with user login data
  shell: htpasswd -bB users.htpasswd user1 openshift

- name: OC login
  shell: "{{ rosa_cluster_admin }}"

# - name: ROSA login
#   shell: rosa create account-roles --mode auto --yes

# - name: Create rosa directory if it does not exist
#   file:
#     path: "{{ oc_dir }}/rosa"
#     state: directory
#     mode: '0755'

# - name: "Install ROSA client"
#   shell: |
#     set -euo pipefail

#     curl -L https://mirror.openshift.com/pub/openshift-v4/clients/rosa/latest/rosa-linux.tar.gz | \
#     tar -xvzf - -C {{ oc_dir }}/ rosa && chmod 755 {{ oc_dir }}/rosa && ln -s {{ oc_dir }}/rosa
#   ignore_errors: true
...
